name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Install golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.53.3

      - name: Run linter
        run: |
          for dir in ./services/*/; do
            echo "Linting $dir"
            cd $dir
            golangci-lint run ./...
            cd -
          done

  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Run tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: test_db
        run: |
          for dir in ./services/*/; do
            echo "Testing $dir"
            cd $dir
            go test -v ./...
            cd -
          done

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build API Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./services/api-gateway
          push: false
          tags: api-gateway:latest

      - name: Build User Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/user-service
          push: false
          tags: user-service:latest

      - name: Build Product Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/product-service
          push: false
          tags: product-service:latest

      - name: Build Notification Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/notification-service
          push: false
          tags: notification-service:latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push API Gateway
        uses: docker/build-push-action@v4
        with:
          context: ./services/api-gateway
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/api-gateway:latest

      - name: Build and push User Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/user-service
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/user-service:latest

      - name: Build and push Product Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/product-service
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/product-service:latest

      - name: Build and push Notification Service
        uses: docker/build-push-action@v4
        with:
          context: ./services/notification-service
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/notification-service:latest

      # Additional deployment steps would go here (e.g., Kubernetes deployment)